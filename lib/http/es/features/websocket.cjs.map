{"version":3,"file":"websocket.cjs","sources":["../../../../../http/es/features/websocket.js"],"sourcesContent":["var t,e;(e=t||(t={})).CONNECTING=\"connecting\",e.CONNECTED=\"connected\",e.DISCONNECTING=\"disconnecting\",e.DISCONNECTED=\"disconnected\",e.ERROR=\"error\";class s{constructor(e){this.ws=null,this.status=t.DISCONNECTED,this.eventListeners=new Map,this.messageQueue=[],this.reconnectAttempts=0,this.reconnectTimer=null,this.heartbeatTimer=null,this.connectionTimer=null,this.config={url:e.url,protocols:e.protocols,autoReconnect:e.autoReconnect??!0,reconnectDelay:e.reconnectDelay??3e3,maxReconnectAttempts:e.maxReconnectAttempts??5,heartbeatInterval:e.heartbeatInterval??3e4,heartbeatMessage:e.heartbeatMessage??{type:\"ping\"},connectionTimeout:e.connectionTimeout??1e4,debug:e.debug??!1,headers:e.headers||{}}}async connect(){if(this.status!==t.CONNECTED&&this.status!==t.CONNECTING)return new Promise((e,s)=>{this.status=t.CONNECTING,this.log(`Connecting to ${this.config?.url}`);try{this.ws=new WebSocket(this.config?.url,this.config?.protocols),this.connectionTimer=setTimeout(()=>{this.status===t.CONNECTING&&(this.ws?.close(),s(new Error(\"Connection timeout\")))},this.config?.connectionTimeout),this.ws.onopen=()=>{this.connectionTimer&&(clearTimeout(this.connectionTimer),this.connectionTimer=null),this.status=t.CONNECTED,this.reconnectAttempts=0,this.log(\"Connected\"),this.startHeartbeat(),this.flushMessageQueue(),this.emit(\"open\"),e()},this.ws.onclose=t=>{this.log(`Disconnected: ${t.code} ${t.reason}`),this.handleDisconnection(t.code,t.reason)},this.ws.onerror=e=>{this.log(\"Error:\",e),this.status=t.ERROR,this.emit(\"error\",e),s(e)},this.ws.onmessage=t=>{this.handleMessage(t.data)}}catch(e){this.status=t.ERROR,s(e)}});this.log(\"Already connected or connecting\")}disconnect(e=1e3,s=\"Normal closure\"){this.log(`Disconnecting: ${e} ${s}`),this.stopHeartbeat(),this.reconnectTimer&&(clearTimeout(this.reconnectTimer),this.reconnectTimer=null),this.connectionTimer&&(clearTimeout(this.connectionTimer),this.connectionTimer=null),this.ws&&(this.status=t.DISCONNECTING,this.ws.close(e,s),this.ws=null),this.status=t.DISCONNECTED,this.emit(\"close\",{code:e,reason:s})}send(e){if(this.status!==t.CONNECTED)return this.messageQueue.push(e),this.log(\"Message queued (not connected)\"),!1;try{const t=\"string\"==typeof e?e:JSON.stringify(e);return this.ws?.send(t),this.log(\"Message sent:\",e),!0}catch(t){return this.log(\"Failed to send message:\",t),!1}}on(t,e){return this.eventListeners.has(t)||this.eventListeners.set(t,new Set),this.eventListeners.get(t).add(e),()=>this.off(t,e)}off(t,e){const s=this.eventListeners.get(t);s&&s.delete(e)}once(t,e){const s=n=>{e(n),this.off(t,s)};this.on(t,s)}getStatus(){return this.status}isConnected(){return this.status===t.CONNECTED}getQueueSize(){return this.messageQueue.length}clearQueue(){this.messageQueue=[]}getReconnectAttempts(){return this.reconnectAttempts}updateConfig(t){Object.assign(this.config,t),this.isConnected()&&(t.heartbeatInterval||t.heartbeatMessage)&&(this.stopHeartbeat(),this.startHeartbeat())}getWebSocket(){return this.ws}emit(t,e){const s=this.eventListeners.get(t);s&&s.forEach(t=>{try{t(e)}catch(t){this.log(\"Error in event listener:\",t)}})}handleMessage(t){try{let e;e=\"string\"==typeof t?JSON.parse(t):t,this.log(\"Message received:\",e),this.emit(\"message\",e)}catch(e){this.log(\"Failed to parse message:\",e),this.emit(\"message\",t)}}handleDisconnection(e,s){this.stopHeartbeat(),this.status=t.DISCONNECTED,this.emit(\"close\",{code:e,reason:s}),this.config?.autoReconnect&&this.reconnectAttempts<this.config?.maxReconnectAttempts?this.reconnect():this.reconnectAttempts>=this.config?.maxReconnectAttempts&&(this.log(\"Max reconnect attempts reached\"),this.emit(\"reconnect_failed\"))}reconnect(){this.reconnectAttempts++,this.log(`Reconnecting... (attempt ${this.reconnectAttempts}/${this.config?.maxReconnectAttempts})`),this.emit(\"reconnecting\",{attempts:this.reconnectAttempts}),this.reconnectTimer=setTimeout(async()=>{try{await this.connect(),this.log(\"Reconnected successfully\"),this.emit(\"reconnect\")}catch(t){this.log(\"Reconnect failed:\",t)}},this.config?.reconnectDelay*this.reconnectAttempts)}startHeartbeat(){this.config?.heartbeatInterval<=0||(this.heartbeatTimer=setInterval(()=>{this.isConnected()&&(this.send(this.config?.heartbeatMessage),this.log(\"Heartbeat sent\"))},this.config?.heartbeatInterval))}stopHeartbeat(){this.heartbeatTimer&&(clearInterval(this.heartbeatTimer),this.heartbeatTimer=null)}flushMessageQueue(){if(0===this.messageQueue.length)return;this.log(`Flushing ${this.messageQueue.length} queued messages`);const t=[...this.messageQueue];this.messageQueue=[],t.forEach(t=>{this.send(t)})}log(...t){this.config}}function n(t){return new s(t)}export{s as WebSocketClient,t as WebSocketStatus,n as createWebSocketClient};\n//# sourceMappingURL=websocket.js.map\n"],"names":["t"],"mappings":";;;;;;;;;;;AAAIA,gCAAA,CAAA,KAAE;AAAA,CAAG,IAAEA,uBAAA,KAAIA,uBAAA,GAAE,EAAC,CAAA,EAAI,aAAW,YAAA,EAAa,CAAA,CAAE,SAAA,GAAU,WAAA,EAAY,EAAE,aAAA,GAAc,eAAA,EAAgB,EAAE,YAAA,GAAa,cAAA,EAAe,EAAE,KAAA,GAAM,OAAA;;;;;"}